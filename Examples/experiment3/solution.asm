	.ORIG X3000

;
;INITIALISATION
;	
A	.STRINGZ	"ROW A: "
B	.STRINGZ	"ROW B: "
C	.STRINGZ	"ROW C: "	

	ADD	R1, R1, #3	;R1 = COUNTER FOR ROW A	
	ADD	R2, R2, #5	;R2 = COUNTER FOR ROW B
	ADD	R3, R3, #8	;R3 = COUNTER FOR ROW C
	BR	INITT		;MAKE SURE FIRST LAUNCH DO NOT HAVE UNNECESSARY NEWLINE
	
INIT	ADD	R0, R1, R2	;CHECK IF SOMEOENE HAS WON
	ADD	R0, R0, R3	;
	BRz	WIN		;

	LD	R0, ENTER	;
	PUTC			;
INITT	LEA	R0, A		;
	PUTS			;
	NOT	R5, R1		;
	NOT	R5, R5		;
LOOP1	BRz	TT2		;PRINT O IN LOOP DEPENDING ON HOW MANY STONES LEFT
	LEA	R0, ONE		;
	PUTS			;
	ADD	R5, R5, #-1	;
	BRp	LOOP1		;
	LD	R0, ENTER	;
	PUTC			;
	BR	T2		;
	
TT2	LD	R0, ENTER	;
	PUTC			;
T2	LEA	R0, B		;
	PUTS			;
	NOT	R5, R2		;
	NOT	R5, R5		;
LOOP2	BRz	TT3		;PRINT O IN LOOP DEPENDING ON HOW MANY STONES LEFT
	LEA	R0, ONE		;
	PUTS			;
	ADD	R5, R5, #-1	;
	BRp	LOOP2		;
	LD	R0, ENTER	;
	PUTC			;
	BR	T3

TT3	LD	R0, ENTER	;
	PUTC			;
T3	LEA	R0, C		;
	PUTS			;
	NOT	R5, R3		;
	NOT	R5, R5		;
LOOP3	LEA	R0, ONE		;PRINT O IN LOOP DEPENDING ON HOW MANY STONES LEFT
	PUTS			;
	ADD	R5, R5, #-1	;
	BRp	LOOP3		;
	
	ADD	R6, R6, #0	;R6 = CHECKER FOR PLAYER1 OR PLAYER2
	BRz	PLAYER1		;IF R6 = 0: PLAYER1
	BRp	PLAYER2		;IF R6 = 1: PLAYER2

;
;PLAYER1 OR PLAYER2 MOVE
;
PLAYER1	LD	R0, ENTER	;
	PUTC			;
	LEA	R0, PROMPT1	;PROMPT PLAYER1
	PUTS			;
	GETC			;
	OUT			;
	BRnzp	LETTERC		;

PLAYER2	LD	R0, ENTER	;
	PUTC			;
	LEA	R0, PROMPT2	;PROMPT PLAYER2
	PUTS			;
	GETC			;
	OUT			;

;
;MAIN ALGORITHM
;
;
;CHECKS FIRST LETTER USER INPUT
;
LETTERC	LD	R7, ATEST	;CHECKS IS IT A?
	ADD	R7, R7, R0	;
	BRz	AYES		;JUMP IF YES

	LD	R7, BTEST	;CHECKS IS IT B?
	ADD	R7, R7, R0	;
	BRz	BYES		;JUMP IF YES

	LD	R7, CTEST	;CHECKS IS IT C?
	ADD	R7, R7, R0	;
	BRz	CYES		;JUMP IF YES
	GETC			;
	OUT			;
	BRnp	ERROR		;JUMP IF ERROR

;
;CHANGE USER INPUT FROM ASCII TO REAL INTEGER
;
AYES	GETC			;
	OUT			;
	LD	R7, CONVERT	;
	ADD	R5, R0, R7	;CONVERT INPUT TO INTEGER
	BRz	ERROR		;
	NOT	R5, R5		;
	ADD	R5, R5, #1	;NEGATE INPUT
	BR	ACALC		;

BYES	GETC			;
	OUT			;
	LD	R7, CONVERT	;
	ADD	R5, R0, R7	;CONVERT INPUT TO INTEGER
	BRz	ERROR		;
	NOT	R5, R5		;
	ADD	R5, R5, #1	;NEGATE INPUT
	BR	BCALC		;

CYES	GETC			;
	OUT			;
	LD	R7, CONVERT	;
	ADD	R5, R0, R7	;CONVERT INPUT TO INTEGER
	BRz	ERROR		;
	NOT	R5, R5		;
	ADD	R5, R5, #1	;NEGATE INPUT
	BR	CCALC		;

;
;CHECK IF IN INTEGER RANGE AND DETERMINE SOME ERRORS
;
ACALC	ADD	R5, R5, R1	;
	BRn	ERROR		;
	NOT	R7, R5		;
	ADD	R7, R7, #1	;NEGATE R5
	ADD	R7, R1, R7	;
	BRn	ERROR		;SECOND INPUT NOT IN INTEGER RANGE
	NOT	R1, R5		;
	NOT	R1, R1		;
	BR	TEMP		;
	
BCALC	ADD	R5, R5, R2	;
	BRn	ERROR		;
	NOT	R7, R5		;
	ADD	R7, R7, #1	;NEGATE R5
	ADD	R7, R2, R7	;
	BRn	ERROR		;SECOND INPUT NOT IN INTEGER RANGE
	NOT	R2, R5		;
	NOT	R2, R2		;
	BR	TEMP		;

CCALC	ADD	R5, R5, R3	;
	BRn	ERROR		;
	NOT	R7, R5		;
	ADD	R7, R7, #1	;NEGATE R5
	ADD	R7, R3, R7	;
	BRn	ERROR		;SECOND INPUT NOT IN INTEGER RANGE
	NOT	R3, R5		;
	NOT	R3, R3		;

;
;CHANGE VALUE OF R6(PLAYER'S TURN) BEFORE GOING BACK INIT
;
TEMP	LD	R0, ENTER	;
	PUTC			;
	BR	BINIT		;CONTROL INSTRUCTION

BINIT	ADD	R6, R6, #0	;
	BRz	N		;
	ADD	R6, R6, #-1	;CHANGE TO PLAYER1
	BR	INIT		;
N	ADD	R6, R6, #1	;CHANGE TO PLAYER2
	BR	INIT		;

;
;ERROR STATEMENT, REQUEST USER'S REINPUT
;
ERROR	LD	R0, ENTER	;
	PUTC			;
	LEA	R0, WRONG	;
	PUTS			;
	ADD	R6, R6, #0	;DETERMINE WHICH PLAYER TO REPROMPT
	BRz	PLAYER1		;
	BRp	PLAYER2		;

;
;WINNING STATEMENT
;
WIN	ADD	R6, R6, #0	;USE VALUE OF R6 TO DETERMINE WHICH PLAYER HAS WON
	BRp	WIN2		;
WIN1	LD	R0, ENTER	;PLAYER1 WINS
	PUTC			;
	LEA	R0, WWIN1	;
	PUTS			;
	BRnzp	DONE		;
WIN2	LD	R0, ENTER	;PLAYER2 WINS
	PUTC			;
	LEA	R0, WWIN2	;
	PUTS			;

DONE	HALT			;HALT THE PROGRAM

;
;CONSTANT
;
ONE	.STRINGZ	"O"

ENTER	.FILL		x0A

PROMPT1	.STRINGZ	"Player 1, choose a row and number of rocks: "
PROMPT2	.STRINGZ	"Player 2, choose a row and number of rocks: "

WRONG	.STRINGZ	"Invalid move. Try again."

WWIN1	.STRINGZ	"Player 1 Wins."
WWIN2	.STRINGZ	"Player 2 Wins."

ATEST	.FILL		X-41
BTEST	.FILL		X-42
CTEST	.FILL		X-43

CONVERT	.FILL		X-30

	.END